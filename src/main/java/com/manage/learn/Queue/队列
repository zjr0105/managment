队列 (Queue)
    特点: 先入先出
    队列的效率：插入和删除的时间复杂度为O(1)
    循环队列: (为了避免队列不满却不能插入新数据项的问题，可以让队头和队尾指针绕回到数组开始的位置，也称“缓冲环”)
    优先队列：
        最大优先队列，无论入队顺序，当前最大的元素优先出队
        最小优先队列，无论入队顺序，当前最小的元素优先出队
    双端队列(Deque)
        一个两端都是结尾的队列
        支持在队列的两端插入和删除元素，继承Queue接口 （可以当栈使用）
        不支持下标访问元素
        实现类：
            ArrayDeque: 由数组支持，使用Deque作为堆栈，则应该使用ArrayDeque作为Deque实现，不允许元素为null
            LinkedList：链表支持，使用Deque作为FIFO队列，允许为空
        并发场景：
            LinkedBlockingDeque: 如果队列为空时,获取操作将会阻塞，知道有元素添加
    阻塞队列 （生产线程和消费者线程）
        支持两个附加操作的队列
        在队列为空，获取元素的线程会变成非空
        在队列满时，存储元素的线程会等待队列可用
        7种阻塞队列：
                ArrayBlockingQueue: 数据结构组成的有界阻塞队列, 遵循FIFO队列
                LinkedBlockingQueue: 链表结构组成的有界阻塞队列
                                      按照先进先出的原则对元素进行排序
                PriortyBlockingQueue: 支持优先级排序的无界阻塞队列
                                      可以通过比较器 Comparator来指定元素的排序规则
                DelayQueue: 使用优先级队列的无界阻塞队列
                            通过PriortyQueue实现的，队列中的元素必须实现Delayed接口
                            队列中的Delayed必须实现 comparaTo 来指定元素的顺序
                            在创建元素的时候可以指定多久才可以获取元素，只有在延期时满了才能提取元素
                        应用场景：
                            缓存系统的设计： 保存元素的有效期，使用一个线程循环查询DealyQueue,一旦获取到元素，表示缓存有效期到了
                            定时任务的调度：保存当天将会执行的任务和执行时间，一旦获取到了任务就开始执行。从比如 TimerQueue就是使用DelayQueue实现的
                SynchronousQueue: 不存储元素的阻塞队列
                                每一个put操作必须等待一个take操作，否则就不能继续添加元素
                        场景：
                            传递性场景
                LinkedTransferQueue: 由链表组成的无界阻塞队列
                LinkedBlockingQeque: 由链表组成的双向阻塞队列
                                        可以从队列的两端插入和移出元素
                原理：
                    通知模式实现的，当生产者往队列中添加元素时会阻塞生产者，当消费者消费了一个队列中的元素后， 会通知生产者当前队列可用。
    有界队列
        基于数组
    无界队列
        基于链表